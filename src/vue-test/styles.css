/* layout */

.flexbox {
    display: flex;
    flex-direction: column;
}

.flexbox.horizontal {
    flex-direction: row;
    align-items: stretch;
}

.flexbox.pack {
    justify-content: center;
}

.flexbox.pull-right {
    justify-content: flex-end;
}

.flexbox > .fill {
    flex-grow: 1;
}

.flexbox > .icon {
    flex-shrink: 0;
}

.flexbox > * {
    margin: 0 0 2rem 0;
}

.flexbox > :last-child {
    margin-bottom: 0;
}

.flexbox.horizontal > * {
    margin: 0 2rem 0 0;
}

.flexbox.horizontal > :last-child {
    margin-right: 0;
}

/* baseline styles */

body {
    font-family: 'Avenir', Helvetica, Arial, sans-serif;
    font-size: 24px;
    letter-spacing: 0.005em;
    color: #555;
    background-color: #f6f6f6;
}

header.flexbox {
    margin-top: 1rem;
    margin-bottom: 4rem;
}

h1 {
    font-size: 3em;
    font-weight: 100;
    text-align: center;
    margin-bottom: 2rem;
    line-height: 2;
}

a, a:link, a:hover, a:active, a:focus, a:visited {
    text-decoration: none;
    color: #ef5575;
    border-bottom: 1px solid;
}

/* todo - can i replace all of these with a single :read-write rule? */
button,
input,
output,
[contenteditable] {
    font-family: 'Avenir', Helvetica, Arial, sans-serif;
    font-size: 100%;
    font-weight: 100;
    line-height: calc(2em + 2px);
}

button.big,
input.big {
    line-height: 3;
}

button,
input,
[contenteditable],
button:focus,
input:focus,
[contenteditable]:focus {
    outline: 0 none;
}

button,
input,
[contenteditable] {
    border-radius: 2px;
}

button:focus,
input:focus,
[contenteditable]:focus {
    border: 1px solid #555;
}

input,
[contenteditable],
output {
    padding: 0 1.5rem;
}

input,
[contenteditable] {
    border: 1px solid #999;
}

input:focus,
[contenteditable]:focus {
    border-color: #ef5575;
}

input.fill.glue {
    margin-right: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    border-right: 0 none;
}

input.fill.glue + button {
    margin-left: 0;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    border-left: 0 none;
}

input.fill.glue:not(:focus) + button {
    border-color: #999;
}

output,
[contenteditable] {
    word-break: break-word;
    word-wrap: break-word;
}

button {
    padding: 0 1em;
    border: 1px solid #ef5575;
    color: #fff;
    background: #ef5575 none;
    cursor: pointer;
}

button.big {
    line-height: 3;
    padding: 0 2em;
}

button:disabled,
[contenteditable]:read-only {
    color: transparent;
    cursor: not-allowed;
}



/* todo - resolve all this read-only/disabled state inside the components (make button etc. into components) */
/* todo - introduce an internal loader for each such component  */
/*button:disabled:before,*/
/*[contenteditable]:read-only:before {*/
    /*content: 'wat';*/
/*}*/



/* components */

.info {
    font-size: 1.1rem;
    color: #ef5575;
}

.icon {
    width: 2.2em;
    height: 2.2em;
    line-height: 0;
    padding: 0;
    border-radius: 2px;
    text-align: center;
    color: #fff;
}

.icon.round {
    /* calculate the inscribed square for the inner element content */
    padding: calc((2.2em - 1.555em) / 2 + 5px);
    /*             ^ circle diameter                */
    /*                     ^ square vertex length   */
}

.round {
    border-radius: 50%;
}

/* helper classes */

.centered-content {
    display: flex;
    justify-content: center;
    align-items: center;
}

.hidden {
    visibility: hidden;
}

.spin {
    animation: spin 2s infinite linear;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

/* bootstrap override */

.tooltip-inner {
    border-radius: 2px;
}

/* vue-svgicon */

.svg-icon {
    display: inline-block;
    width: 16px;
    height: 16px;
    color: inherit;
    vertical-align: middle;
    fill: none;
    stroke: currentColor;
}

.svg-fill {
    fill: currentColor;
    stroke: none;
}
